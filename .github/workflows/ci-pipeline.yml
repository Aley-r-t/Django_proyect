name: CI Pipeline AWS SonarQube

on:
  push:
    branches:
      - main
      - develop

jobs:
  aws-analysis:
    name: Analysis with AWS SonarQube
    runs-on: self-hosted  # Utiliza el runner auto-hospedado

    steps:
      # 1. Checkout del código
      - name: Checkout code
        uses: actions/checkout@v3

      # 2. Configurar Python (para Django)
      - name: Set up Python
        run: |
          sudo alternatives --set python3 /usr/bin/python3.8
          sudo alternatives --set pip3 /usr/bin/pip3.8
          python3 --version
          pip3 --version

      # 3. Instalar dependencias del backend (Django)
      - name: Install Backend Dependencies
        run: |
          cd lab14
          pip3 install -r requirements.txt

      # 4. Ejecutar migraciones
      - name: Run Migrations
        run: |
          cd lab14
          python3 manage.py migrate

      # 5. Ejecutar pruebas del backend
      - name: Run Backend Tests
        run: |
          cd lab14
          python3 manage.py test

      # 6. Instalar dependencias del frontend
      - name: Install Frontend Dependencies
        run: |
          cd client
          npm install

      # 7. Construir el frontend
      - name: Build Frontend
        run: |
          cd client
          npm run build

      # 8. Ejecutar pruebas del frontend (si las tienes)
      - name: Run Frontend Tests
        run: |
          cd client
          npm run test

      # 9. Análisis de SonarQube para backend
      - name: SonarQube Analysis for Backend
        uses: sonarsource/sonarqube-scan-action@v1
        with:
          projectBaseDir: lab14
        env:
          SONAR_HOST_URL: http://localhost:9000
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      # 10. Análisis de SonarQube para frontend
      - name: SonarQube Analysis for Frontend
        uses: sonarsource/sonarqube-scan-action@v1
        with:
          projectBaseDir: client
        env:
          SONAR_HOST_URL: http://localhost:9000
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
